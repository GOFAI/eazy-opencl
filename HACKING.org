

Design Architechture:

* Error handling (layer 0)

This layer wraps the bare CFFI api with error handling.

OpenCL APIs can be divided into three categories of functions:

1. It does not return any error
2. The return value (cl_int) tells the error situation
3. Takes a pointer to cl_int in the last argument, then sets the error value to that address

The level0 binding layer handles the second case only.

* Garbage collection (layer 0)

We use the garbage collector of the host lisp
in order to manage opencl objects with refcount interface, e.g. context, kernel and memobj.

These objects are boxed in lisp structure-objects, named as boxed-context, boxed-kernel and so on.
When these objects are GC'ed, then the finalization procedure implemented with trivial-garbage:finalize
will invoke appropriate RELEASE interface of the refcount system in OpenCL.
(e.g. release-kernel, release-context).

Boxing/unboxing operations are transparent to the user; it runs during
foreign type translation.

* Error handling (layer 1)

In error-handlers.lisp, `wrap-api-taking-error-ptr` handles the third case.
Resulting interface has an argument list shorter than the original function by one (errcode-ret).

* Convert the imperative C apis -> functional apis. (layer 2)

This layer handles more about pointers, including properties and arrays.

Error handling is already achieved by the previous layer.
What we do now is to convert to/from foreign type,
or to handle the apis which returns the result by setting it to the given pointer.

Original api names are maintained. Some are re-exported from level-1, some
are newly interned and exported.

* Performance overhead of boxing

Computation done by opencl should be sufficiently larger than the overhead.

If this overhead is a problem, then it also means that your application
contains a large number of very costly GPU-MEMORY communications, required
each time the GPGPU computation is initialized. In such cases, you should
instead consider changing the algorithm or even stop using GPGPU.
